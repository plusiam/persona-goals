generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  firebaseUid   String    @unique
  email         String    @unique
  name          String?
  photoUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  personas      Persona[]
  settings      UserSettings?

  @@map("users")
}

model UserSettings {
  id                      String    @id @default(cuid())
  userId                  String    @unique
  mode                    UserMode  @default(SIMPLE)
  level                   Int       @default(1)
  firstGoalDate           DateTime?
  lastActiveDate          DateTime?
  consecutiveDays         Int       @default(0)
  totalGoalsCreated       Int       @default(0)
  totalGoalsCompleted     Int       @default(0)
  showOnboarding          Boolean   @default(true)
  hasSeenSmartSuggestion  Boolean   @default(false)
  hasSeenPersonaSuggestion Boolean  @default(false)
  preferredCategories     String[]
  activeHours             Json?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Persona {
  id            String        @id @default(cuid())
  userId        String
  type          PersonaType   @default(LEARNER)
  name          String
  color         String
  icon          String
  isActive      Boolean       @default(true)
  settings      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  goals         Goal[]

  @@map("personas")
}

model Goal {
  id            String        @id @default(cuid())
  personaId     String
  type          GoalType      @default(TASK)
  title         String
  description   String?
  status        GoalStatus    @default(PENDING)
  progress      Float         @default(0)
  dueDate       DateTime?
  completedAt   DateTime?
  category      String?
  isHidden      Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  persona       Persona       @relation(fields: [personaId], references: [id], onDelete: Cascade)
  activities    Activity[]
  subGoals      Goal[]        @relation("GoalToSubGoal")
  parentGoal    Goal?         @relation("GoalToSubGoal", fields: [parentGoalId], references: [id])
  parentGoalId  String?

  @@map("goals")
}

model Activity {
  id            String        @id @default(cuid())
  goalId        String
  action        String
  details       Json?
  timestamp     DateTime      @default(now())

  goal          Goal          @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@map("activities")
}

enum UserMode {
  SIMPLE
  SMART
  PERSONA
}

enum PersonaType {
  LEARNER
  PERSONAL
  PROFESSIONAL
  CUSTOM
}

enum GoalType {
  DREAM
  PROJECT
  HABIT
  TASK
}

enum GoalStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}